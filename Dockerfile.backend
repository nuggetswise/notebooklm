# Multi-stage Dockerfile for optimized Email RAG backend
FROM python:3.9-slim as builder

# Install build dependencies (including lxml requirements)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libxml2-dev \
    libxslt1-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install requirements
COPY requirements_production.txt .
RUN pip install --no-cache-dir -r requirements_production.txt

# Production stage
FROM python:3.9-slim as production

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libgomp1 \
    libxml2 \
    libxslt1.1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash app
USER app

WORKDIR /app

# Copy application code
COPY --chown=app:app ingestion_api/ ./ingestion_api/
COPY --chown=app:app rag/ ./rag/
COPY --chown=app:app data/ ./data/

# Create necessary directories
RUN mkdir -p /app/data/vector_store /app/data/parsed_emails

# Set environment variables
ENV PYTHONPATH=/app
ENV NOMIC_INFERENCE_MODE=local
ENV ENVIRONMENT=production
ENV PYTHONUNBUFFERED=1

# Expose port (will be overridden by Cloud Run)
EXPOSE 8080

# Health check (using fixed port for health check)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the application using PORT environment variable
CMD exec uvicorn ingestion_api.main:app --host 0.0.0.0 --port ${PORT:-8080} --workers 1 